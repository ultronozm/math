name: compile
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - '**/*.tex'
permissions:
  contents: write
jobs:          
  latexmk:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        emacs_version:
          # XXX Emacs 26.1's make install doesn't install emacs-module.h
          # - 26.1
          # - 26.3
          - snapshot
    steps:
      - name: Checkout pages
        uses: actions/checkout@v3
        with:
          ref: deploy
          fetch-depth: 0
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
      - name: Install TeXlive
        run: sudo apt-get update && sudo apt-get install texlive texlive-publishers texlive-science latexmk cm-super
      - name: Debugging shell        
        working-directory: ${{ env.DIR }}
        run: |
          echo "Current directory is $(pwd)"
          echo "Listing files in the current directory:"
          ls -al
          echo "Git status:"
          git status
          echo "Git branch:"
          git branch
      - name: Rebase from main
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git rebase origin/main
      - name: Run latexmk
        run: |
          EXCLUDE_FILES=$(jq -r '.exclude[]' config.json)
          if [[ "${{ github.event_name }}" == "push" ]]; then          
            git diff --name-only --diff-filter=d ${{ github.event.before }} ${{ github.event.after }} | grep .tex | grep -v $EXCLUDE_FILES | while read file; do
              echo "Processing $file"
              latexmk -pdf -shell-escape -view=none $file -f
            done
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            find . -maxdepth 1 -name "*.tex" | grep -v $EXCLUDE_FILES | while read file; do
              echo "Processing $file"
              latexmk -pdf -shell-escape -view=none $file -f
            done
          fi            
      - name: Debugging shell        
        working-directory: ${{ env.DIR }}
        run: |
          echo "Current directory is $(pwd)"
          echo "Listing files in the current directory:"
          ls -al
      - uses: purcell/setup-emacs@master
        with:
          version: ${{ matrix.emacs_version }}
      - name: Convert to html
        run: |
          EXCLUDE_FILES=$(jq -r '.exclude[]' config.json)
          if [[ "${{ github.event_name }}" == "push" ]]; then          
            git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep .tex | grep -v $EXCLUDE_FILES | while read file; do
              echo "Converting $file to html"
              docker run --volume "`pwd`:`pwd`" --workdir "`pwd`" pandoc/core:3.1 --standalone "$file" -o "${file%.tex}.html" --mathjax --citeproc
              echo "Listing files in the current directory:"
              ls -al
              sudo chown runner:docker "${file%.tex}.html"
              ls -al
              emacs --batch "${file%.tex}.html" -l ./tex2html.el --eval "(progn (tex2html-add-style-to-html-head) (tex2html-postprocess-html-buffer) (tex2html-add-comment-script))" -f save-buffer
            done
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            find . -maxdepth 1 -name "*.tex" | grep -v $EXCLUDE_FILES | while read file; do
              echo "Converting $file to html"
              docker run --volume "`pwd`:`pwd`" --workdir "`pwd`" pandoc/core:3.1 --standalone "$file" -o "${file%.tex}.html" --mathjax --citeproc
              echo "Listing files in the current directory:"
              ls -al
              sudo chown runner:docker "${file%.tex}.html"
              ls -al
              emacs --batch "${file%.tex}.html" -l ./tex2html.el --eval "(progn (tex2html-add-style-to-html-head) (tex2html-postprocess-html-buffer) (tex2html-add-comment-script) (tex2html-add-tex-pdf-links))" -f save-buffer
            done
          fi            
      - name: Debugging shell        
        working-directory: ${{ env.DIR }}
        run: |
          echo "Current directory is $(pwd)"
          echo "Listing files in the current directory:"
          ls -al
      - name: Commit and push
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add *.txt
          git add *.aux || true
          git add *.pdf || true
          git add *.html || true
          git commit -m "Updated aux, pdf and html files" || echo "No changes to commit"
          git push -f
